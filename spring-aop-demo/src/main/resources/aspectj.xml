<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 目标类 -->
    <bean id="testServiceId" class="com.lk.app.aspectj.xml.service.impl.TestServiceImpl"/>

    <!-- 切面类 -->
    <bean id="adviceId" class="com.lk.app.aspectj.xml.advice.TestAdvices"/>

    <!-- spring apo 配置
        <aop:aspect> 将切面类声明为“切面”，从而获得通知方法
            ref 切面类的引用
        <aop:pointcut> 声明一个切入点，所有的通知都可以使用
            expression : 切入点表达式
            id : 切入点名称，用于其他通知引用
    -->
    <aop:config>
        <aop:aspect ref="adviceId">
            <aop:pointcut id="myPointcut" expression="execution(* com.lk.app.aspectj.xml.service.impl.*.*(..))"/>
            <!-- 1.前置通知
                <aop:before method="" pointcut-ref="" pointcut=""/>
                    method : 通知，即切面类中的方法
                    pointcut-ref : 切入点表达式，此表达式只能当前通知使用
                    pointcut : 切入点引用，<aop:pointcut>标签声明的公共切入点
                通知方法格式 : public void beforeAdvice(JoinPoint joinPoint) {
                    参数1 : org.aspectj.lang.JoinPoint 可以使用getSignature方法，获取到方法签名，
                           即方法的修饰符、返回值、方法名、参数列表等内容。
                           JoinPoint也可以使用getArgs方法，获取到参数列表。
                例如：
                <aop:before method="beforeAdvice" pointcut-ref="myPointcut"/>
            -->
            <!-- 2.后置通知 
                <aop:after-returning method="" returning=""/>
                    returning : 通知方法的第二个参数的名称
                通知方法格式 : public void afterReturningAdvice(JoinPoint joinPoint, Object obj) {
                    参数1 : 连接点描述
                    参数2 : 类型Object，为目标方法执行后的返回值，参数名称为returning属性的值
                例如 :
                <aop:after-returning method="afterReturningAdvice" returning="obj" pointcut-ref="myPointcut"/>
            -->
            <!-- 3.环绕通知
                <aop:around method="" pointcut-ref=""/>
                通知方法格式 : public Object aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable {
                    方法返回值类型 : Object
                    方法名 : 任意
                    参数 : org.aspectj.lang.ProceedingJoinPoint
                    抛出异常
                  注：需要手动执行目标方法 : Object object = joinPoint.proceed();
                例如 :
                <aop:around method="aroundAdvice" pointcut-ref="myPointcut"/>
            -->
            <!-- 4.抛出异常通知 
                <aop:after-throwing method="" pointcut-ref="" throwing=""/>
                    throwing : 通知方法的第二参数的名称
                通知方法格式 : public void afterThrowingAdvice(JoinPoint joinPoint, Throwable e) {
                    参数1 : 连接点
                    参数2 : 抛出的异常信息，类型Throwable，参数名称为throwing属性的值
                例如 :

                <aop:after-throwing method="afterThrowingAdvice" pointcut-ref="myPointcut" throwing="e"/>
            -->
            <!-- 5.最终通知
                <aop:after method="" pointcut-ref=""/>
                    即为finally块中的代码
                通知方法格式 : public void after(JoinPoint joinPoint) {
                例如 :
                <aop:after method="afterAdvice" pointcut-ref="myPointcut"/>
            -->

        </aop:aspect>
    </aop:config>
</beans>